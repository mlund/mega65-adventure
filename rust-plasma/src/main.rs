#![no_std]
#![feature(start)]
#![feature(default_alloc_error_handler)]
#![allow(unused_imports)]

pub mod mega65;
use core::iter::zip;
use core::panic::PanicInfo;
use core::ptr::write_bytes;
use itertools::iproduct;
use ufmt_stdio::*;

const VICII: *mut u8 = (0xd000) as *mut u8;
const SCREEN1: *mut u8 = (0x2800) as *mut u8;
const SCREEN2: *mut u8 = (0x2c00) as *mut u8;
const CHARSET: *mut u8 = (0x2000) as *mut u8;

#[panic_handler]
fn panic(_info: &PanicInfo) -> ! {
    #[cfg(not(target_vendor = "nes-nrom-128"))]
    println!("PANIC!!!");
    loop {}
}

unsafe fn doplasma(scrn: *mut u8) {
    static mut C1A: u8 = 0;
    static mut C1B: u8 = 0;
    static mut C2A: u8 = 0;
    static mut C2B: u8 = 0;
    static mut XBUF: [u8; 40] = [0; 40];
    static mut YBUF: [u8; 25] = [0; 25];

    let mut c1a = C1A;
    let mut c1b = C1B;
    YBUF.iter_mut().for_each(|y| {
        *y = add!(SINUSTABLE[c1a as usize], SINUSTABLE[c1b as usize]);
        c1a = add!(c1a, 4);
        c1b = add!(c1b, 9);
    });
    C1A = add!(C1A, 3);
    C1B = sub!(C1B, 5);

    let mut c2a = C2A;
    let mut c2b = C2B;
    XBUF.iter_mut().for_each(|x| {
        *x = add!(SINUSTABLE[c2a as usize], SINUSTABLE[c2b as usize]);
        c2a = add!(c2a, 3);
        c2b = add!(c2b, 7);
    });
    C2A = add!(C2A, 2);
    C2B = sub!(C2B, 3);

    iproduct!(YBUF.iter().copied(), XBUF.iter().copied())
        .enumerate()
        .for_each(|(cnt, (y, x))| {
            poke!(scrn.offset(cnt as isize), add!(y, x));
        })
}

/** https://stackoverflow.com/questions/66482699/how-to-repeat-each-element-of-iterator-n-times*/
fn repeat_element<T: Clone>(it: impl Iterator<Item = T>, cnt: usize) -> impl Iterator<Item = T> {
    it.flat_map(move |n| core::iter::repeat(n).take(cnt))
}

unsafe fn makechar() {
    const BITS: [u8; 8] = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80];
    repeat_element(SINUSTABLE.iter(), 8)
        .enumerate()
        .for_each(|(cnt, sine)| {
            let mut character = 0b00000000u8;
            BITS.iter()
                .filter(|_| rand8!(c64::SID) > *sine)
                .for_each(|bit| {
                    character |= bit;
                });
            poke!(CHARSET.offset(cnt as isize), character);
            if cnt % 64 == 0 {
                print!(".");
            }
        });
}

#[start]
fn _main(_argc: isize, _argv: *const *const u8) -> isize {
    unsafe {
        start_sid_random_generator();
        makechar();
        let page1 = ((SCREEN1 as u16 >> 6) & 0xf0 | ((CHARSET as u16 >> 10) & 0x0e)) as u8;
        let page2 = ((SCREEN2 as u16 >> 6) & 0xf0 | ((CHARSET as u16 >> 10) & 0x0e)) as u8;
        loop {
            doplasma(SCREEN1);
            poke!(VICII.offset(0x18), page1);
            doplasma(SCREEN2);
            poke!(VICII.offset(0x18), page2);
        }
    }
}

const SINUSTABLE: [u8; 256] = [
    0x80, 0x7d, 0x7a, 0x77, 0x74, 0x70, 0x6d, 0x6a, 0x67, 0x64, 0x61, 0x5e, 0x5b, 0x58, 0x55, 0x52,
    0x4f, 0x4d, 0x4a, 0x47, 0x44, 0x41, 0x3f, 0x3c, 0x39, 0x37, 0x34, 0x32, 0x2f, 0x2d, 0x2b, 0x28,
    0x26, 0x24, 0x22, 0x20, 0x1e, 0x1c, 0x1a, 0x18, 0x16, 0x15, 0x13, 0x11, 0x10, 0x0f, 0x0d, 0x0c,
    0x0b, 0x0a, 0x08, 0x07, 0x06, 0x06, 0x05, 0x04, 0x03, 0x03, 0x02, 0x02, 0x02, 0x01, 0x01, 0x01,
    0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x02, 0x03, 0x03, 0x04, 0x05, 0x06, 0x06, 0x07, 0x08, 0x0a,
    0x0b, 0x0c, 0x0d, 0x0f, 0x10, 0x11, 0x13, 0x15, 0x16, 0x18, 0x1a, 0x1c, 0x1e, 0x20, 0x22, 0x24,
    0x26, 0x28, 0x2b, 0x2d, 0x2f, 0x32, 0x34, 0x37, 0x39, 0x3c, 0x3f, 0x41, 0x44, 0x47, 0x4a, 0x4d,
    0x4f, 0x52, 0x55, 0x58, 0x5b, 0x5e, 0x61, 0x64, 0x67, 0x6a, 0x6d, 0x70, 0x74, 0x77, 0x7a, 0x7d,
    0x80, 0x83, 0x86, 0x89, 0x8c, 0x90, 0x93, 0x96, 0x99, 0x9c, 0x9f, 0xa2, 0xa5, 0xa8, 0xab, 0xae,
    0xb1, 0xb3, 0xb6, 0xb9, 0xbc, 0xbf, 0xc1, 0xc4, 0xc7, 0xc9, 0xcc, 0xce, 0xd1, 0xd3, 0xd5, 0xd8,
    0xda, 0xdc, 0xde, 0xe0, 0xe2, 0xe4, 0xe6, 0xe8, 0xea, 0xeb, 0xed, 0xef, 0xf0, 0xf1, 0xf3, 0xf4,
    0xf5, 0xf6, 0xf8, 0xf9, 0xfa, 0xfa, 0xfb, 0xfc, 0xfd, 0xfd, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfe, 0xfd, 0xfd, 0xfc, 0xfb, 0xfa, 0xfa, 0xf9, 0xf8, 0xf6,
    0xf5, 0xf4, 0xf3, 0xf1, 0xf0, 0xef, 0xed, 0xeb, 0xea, 0xe8, 0xe6, 0xe4, 0xe2, 0xe0, 0xde, 0xdc,
    0xda, 0xd8, 0xd5, 0xd3, 0xd1, 0xce, 0xcc, 0xc9, 0xc7, 0xc4, 0xc1, 0xbf, 0xbc, 0xb9, 0xb6, 0xb3,
    0xb1, 0xae, 0xab, 0xa8, 0xa5, 0xa2, 0x9f, 0x9c, 0x99, 0x96, 0x93, 0x90, 0x8c, 0x89, 0x86, 0x83,
];
