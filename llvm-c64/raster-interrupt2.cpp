/*
 * Use hardware IRQ
 *
 * - BASIC and KERNAL roms are killed
 * - Adapted to LLVM-MOS C++ from "Introduction to Raster IRQs" at Codebase64:
 *   https://codebase64.org/doku.php?id=base:introduction_to_raster_irqs
 *
 * Wombat, 2022
 */
#include <cstdint>

#define PEEK(address) (*(uint8_t *)(address))
#define POKE(address, value) *(uint8_t *)(address) = (value)

typedef void (*IRQ_TYPE)(void);

// We can either go via the kernal interrupt or access hardware directly
[[maybe_unused]] IRQ_TYPE *const KERNAL_IRQ = (IRQ_TYPE *)0x0314;
[[maybe_unused]] IRQ_TYPE *const HARDWARE_IRQ = (IRQ_TYPE *)0xfffe;

/**
 * @brief Initialize interrupt
 * @param irq_function Function to call on each triggerin event
 * @param triggering_raster_line VIC-II raster line to trigger irq
 */
void start_irq(IRQ_TYPE irq_function, uint8_t triggering_raster_line) {
    asm volatile(R"(
        sei        ;disable maskable IRQs
        lda #$7f
        sta $dc0d  ;disable timer interrupts which can be generated by the two CIA chips
        sta $dd0d  ;the kernal uses such an interrupt to flash the cursor and scan the keyboard, so we better
                   ;stop it.
        lda $dc0d  ;by reading this two registers we negate any pending CIA irqs.
        lda $dd0d  ;if we don't do this, a pending CIA irq might occur after we finish setting up our irq.
                   ;we don't want that to happen.
    )" ::: "a");

    POKE(0xd01a, 0x01); // tell VICII to generate a raster interrupt
    POKE(0xd012, triggering_raster_line); // raster line to trigger irq

    // as there are more than 256 rasterlines, the topmost bit of $d011 serves
    // as the 9th bit for the rasterline we want our irq to be triggered. here
    // we simply set up a character screen, leaving the topmost bit 0.
    POKE(0xd011, 0x1b);

    POKE(0x01, 0x35);             // turn off BASIC and KERNAL roms
    *HARDWARE_IRQ = irq_function; // set interrupt vectors,

    // clear interrupt flag, allowing the CPU to respond to interrupt requests
    asm volatile("cli");
}

// Called every time the raster interrupt is triggered
__attribute__((interrupt)) void called_every_frame() {
    POKE(0xd020, 3);
    for (int i = 0; i < 0x80; i++) {
        asm volatile("nop");
    }
    POKE(0xd020, 0);

    // acknowledge the interrupt by clearing the VIC's interrupt flag
    asm volatile("lsr $d019");
}

int main() {
    start_irq(&called_every_frame, 100);
    while (true) { // let's not return to killed BASIC...
        asm volatile("nop");
    }
}
